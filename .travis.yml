language: java
jdk:
  - openjdk8

branches:
  only:
    - master

# Travis CI 서버의 Home
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

script: "./gradlew clean build"

# CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - yolip51@gmail.com

# deploy 설정만 잡을 경우 파일 하나하나가 복사되기 떄문에 복사 시간에 많은 시간을 할애한다. 따라서 압축파일로 업로드 위한 설정 추가
before_deploy:
  - zip -r spring-webservice * # 현재 위치의 모든 파일을 spring-service이름으로 압축
  - mkdir -p deploy # deploy라는 디렉토리를 Travis CI가 실행 중인 위치에서 생성
  - mv spring-webservice.zip deploy/spring-webservice.zip # spring-webservice.zip 파일을 deploy/springboot-webservice.zip로 이동

# CodeDeploy는 저장 기능이 없습니다.
#  그래서 Travis CI가 Build 한 결과물을 받아서 CodeDeploy가 가져갈 수 있도록 보관할 수 있는 공간이 필요합니다.
#  보통은 이럴때 AWS S3를 이용합니다.
deploy:
   - provider: s3
     access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
     secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
     bucket: spring-webservice-hjg # 생성한 S3 버킷
     region: ap-northeast-2
     local_dir: deploy # before_deploy에서 생성한 디렉토리
     skip_cleanup: true #provider에게 deploying 되었을 때, Travis가 우리의 작업 중인 directory를 reset하는 것을 예방하고, build(git stash --all)동안 모든 변화를 delete한다.
     acl: public_read
     wait-until-deployed: true
     on:
       repo: gonghojin/spring-webservice #Github 주소
       branch: master

   - provider: codedeploy
     access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
     secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
     bucket: spring-webservice-hjg # 생성한 S3 버킷
     key: spring-webservice.zip # 빌드 파일을 압축해서 전달
     bundle_type: zip
     application: springboot-webservice # 웹 콘솔에서 등록한 CodeDeploy 어플리케이션
     deployment_group: springboot-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
     region: ap-northeast-2
     wait-until-deployed: true
     on:
       repo: gonghojin/spring-webservice #Github 주소
       branch: master